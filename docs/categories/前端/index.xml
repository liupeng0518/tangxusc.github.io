<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on 苏连云的博客</title>
    <link>https://tangxusc.github.io/blog/categories/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on 苏连云的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2019 14:15:59 +0800</lastBuildDate>
    
	<atom:link href="https://tangxusc.github.io/blog/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端加载私有文件随想</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%BD%BD%E7%A7%81%E6%9C%89%E6%96%87%E4%BB%B6%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%BD%BD%E7%A7%81%E6%9C%89%E6%96%87%E4%BB%B6%E9%9A%8F%E6%83%B3/</guid>
      <description>前端加载私有文件随想 在前后端分离的工程中,前后端通信链路由前端调用后端,变成了前端&amp;ndash;&amp;gt;api gateway&amp;ndash;&amp;gt;后端,那么前端在加载一些私有资源(需要权限,需要认证)等文件时会存在无法传入token的问题 本文是针对前端加载资源的随想
 未前后端分离调用链路
前端 ------&amp;gt; 后端 ------&amp;gt; 返回结果到前端  前后端分离调用链路
前端 ------&amp;gt; API gateway ------&amp;gt; 后端 ------&amp;gt; 前端   解决方案列表 在前端加载一些文件,例如图片,浏览器会根据image标签的src属性自动获取图片的二进制流,浏览器在加载图片时,不会带上token在header中,一切都是浏览器默认行为,所以此处无法利用浏览器默认行为加载私有文件,所以提出了以下几种解决方案.
 前端ajax加载,后端返回base64,前端再做处理 前端在url中加入token,传入到后端 前端获取token,存入cookie,后端根据优先级来获取token  下面我们分别来说说这三种方案.
前端ajax加载,后端返回base64,前端再做处理 链路图如下:
前端ajax ------&amp;gt; API gateway ------&amp;gt; 后端base64 ------&amp;gt; 前端设置图片base64  前端:使用ajax加载图片,ajax中带上token等认证信息 后端:在接收到请求后,将图片转为base64字符串,通过response返回至前端 前端:在接收到后端返回后,将base64设置至相关的image中
 优点: 遵循原有token机制 可解决加载机制
 缺点:
 base64在后端转换增加了后端压力
 base64在前端处理较为麻烦(如果有大量图片,容易产生阻塞)
 整个链路复杂度太高了,涉及到很多流的操作
 其他类型的文件无法满足此需求
  前端在url中加入token,传入到后端 链路图如下:
前端修改图片url ------&amp;gt; API gateway ------&amp;gt; 后端返回图片二进制  前端:在加载图片时,先修改图片的url,带上token参数 后端:在接收到请求后返回图片二进制</description>
    </item>
    
  </channel>
</rss>