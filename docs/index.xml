<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苏连云的博客</title>
    <link>https://tangxusc.github.io/blog/</link>
    <description>Recent content on 苏连云的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2019 15:34:24 +0800</lastBuildDate>
    
	<atom:link href="https://tangxusc.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Local Persistent Volume 介绍</title>
      <link>https://tangxusc.github.io/blog/2019/05/local-persistent-volume-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 20 May 2019 15:34:24 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/local-persistent-volume-%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;在kubernetes中,存储一直是一个较为头疼的问题,在面对持久化存储,我们可以选择各种文件系统,但是对于那些临时存储的文件,我们则需要一种本地存储的能力,在kubernetes1.14中为我们提供了一种本地存储&lt;code&gt;localPV&lt;/code&gt;,本文将围绕此展开.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubebuilder介绍</title>
      <link>https://tangxusc.github.io/blog/2019/05/kubebuilder%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 20 May 2019 14:10:08 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/kubebuilder%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;在之前的文章中我们讲到了kubernetes的rest api,并使用client-go等客户端来调用api.&lt;/p&gt;

&lt;p&gt;接下来我们将使用到kubernetes为构建controller诞生的专用工具&lt;code&gt;kubebuilder&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>今日心情-上善若水</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E4%BB%8A%E6%97%A5%E5%BF%83%E6%83%85-%E4%B8%8A%E5%96%84%E8%8B%A5%E6%B0%B4/</link>
      <pubDate>Mon, 20 May 2019 09:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E4%BB%8A%E6%97%A5%E5%BF%83%E6%83%85-%E4%B8%8A%E5%96%84%E8%8B%A5%E6%B0%B4/</guid>
      <description>&lt;p&gt;一天又一天,每一天都那么一样又不那么一样.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>code-generator使用</title>
      <link>https://tangxusc.github.io/blog/2019/05/code-generator%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 17 May 2019 11:13:08 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/code-generator%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;client-go为我们提供了kubernetes原生资源的informer和clientset等等的访问,那么自定义资源如何操作呢? 本文将为你介绍..&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-7</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-7/</link>
      <pubDate>Thu, 16 May 2019 16:13:14 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-7/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81948541&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81948541&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第七节,也是最后一节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-6</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-6/</link>
      <pubDate>Thu, 16 May 2019 16:13:13 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81948239&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81948239&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第六节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-5</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-5/</link>
      <pubDate>Thu, 16 May 2019 16:13:12 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-5/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81946899&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81946899&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第五节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-4</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-4/</link>
      <pubDate>Thu, 16 May 2019 16:13:11 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81946398&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81946398&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第四节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-3</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-3/</link>
      <pubDate>Thu, 16 May 2019 16:13:10 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81945559&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81945559&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第三节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-2</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-2/</link>
      <pubDate>Thu, 16 May 2019 16:13:09 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81940918&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81940918&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第二节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解kubernetes tools/cache包-1</title>
      <link>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-1/</link>
      <pubDate>Thu, 16 May 2019 16:13:08 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/%E7%90%86%E8%A7%A3kubernetes-tools/cache%E5%8C%85-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/weixin_39961559/article/details/81938716&#34;&gt;https://blog.csdn.net/weixin_39961559/article/details/81938716&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列深入介绍了informer的原理,这是本系列第一节&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Client-Go informer机制</title>
      <link>https://tangxusc.github.io/blog/2019/05/client-go-informer%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 16 May 2019 15:13:08 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/client-go-informer%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;在之前的文章中我们了解了client-go的使用,接下来我们深入的了解一下client-go中的informer机制.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Client Go使用</title>
      <link>https://tangxusc.github.io/blog/2019/05/client-go%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 15 May 2019 15:13:08 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/client-go%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;kubernetes提供了rest api供我们操作集群,针对go语言专门提供了client-go来操作,并且在很多controller中都使用到了client-go,本文将介绍client-go简单使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang package和module解析</title>
      <link>https://tangxusc.github.io/blog/2019/05/golang-package%E5%92%8Cmodule%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 15 May 2019 09:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/golang-package%E5%92%8Cmodule%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;go语言中的package和module是我们经常会用到的功能,本文将详细的描述这两个功能的用法.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文基于golang 1.12.2和go module,之前老的gopath的使用方式不再推荐.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>kubelet垃圾回收机制</title>
      <link>https://tangxusc.github.io/blog/2019/05/kubelet%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 14 May 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/kubelet%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;在k8s中节点会通过docker pull机制获取外部的镜像,那么什么时候清除镜像呢?
k8s运行的容器又是什么时候清除呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Etcd Lock详解</title>
      <link>https://tangxusc.github.io/blog/2019/05/etcd-lock%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 07 May 2019 14:38:42 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/05/etcd-lock%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;分布式情况下最终都会面临一个资源抢占的问题,解决问题的方法为抽象一个分布式锁,持有锁则可以操作资源,本文使用etcd实现一个分布式锁&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Etcd搭建及使用</title>
      <link>https://tangxusc.github.io/blog/2019/04/etcd%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 25 Apr 2019 16:41:39 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/etcd%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;etcd是云原生的存储基石,在kubernetes中的存储便采用的etcd.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Cfssl生成etcd证书(pem)</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E4%BD%BF%E7%94%A8cfssl%E7%94%9F%E6%88%90etcd%E8%AF%81%E4%B9%A6pem/</link>
      <pubDate>Thu, 25 Apr 2019 13:56:22 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E4%BD%BF%E7%94%A8cfssl%E7%94%9F%E6%88%90etcd%E8%AF%81%E4%B9%A6pem/</guid>
      <description>&lt;p&gt;CFSSL是CloudFlare开源的一款PKI/TLS工具,CFSSL包含一个&lt;code&gt;命令行工具&lt;/code&gt;和一个用于&lt;code&gt;签名&lt;/code&gt;，验证并且捆绑TLS证书的&lt;code&gt;HTTP API服务&lt;/code&gt;,使用Go语言编写.&lt;/p&gt;

&lt;p&gt;github: &lt;a href=&#34;https://github.com/cloudflare/cfssl&#34;&gt;https://github.com/cloudflare/cfssl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载地址: &lt;a href=&#34;https://pkg.cfssl.org/&#34;&gt;https://pkg.cfssl.org/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-11 升级到1.1.2</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-11-%E5%8D%87%E7%BA%A7%E5%88%B01.1.2/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-11-%E5%8D%87%E7%BA%A7%E5%88%B01.1.2/</guid>
      <description>&lt;p&gt;istio经过8个月的发展和社区中的各位大佬的孜孜不倦的贡献,终于发布了1.1版本,新版本为&lt;code&gt;企业级就绪&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-11 升级到1.1.2</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-11-%E5%8D%87%E7%BA%A7%E5%88%B01.1.2/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-11-%E5%8D%87%E7%BA%A7%E5%88%B01.1.2/</guid>
      <description>&lt;p&gt;istio经过8个月的发展和社区中的各位大佬的孜孜不倦的贡献,终于发布了1.1版本,新版本为&lt;code&gt;企业级就绪&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-jwt认证</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-jwt%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-jwt%E8%AE%A4%E8%AF%81/</guid>
      <description>&lt;p&gt;在建设企业的各种项目中,我们一定离不开,或者总要和认证授权系统打交道,应用总会入侵一些认证和授权部分的代码,现在在java等方面有大量的安全框架,例如&lt;code&gt;spring security,shiro&lt;/code&gt;等等框架,这些框架也是为了解决这个重复性的做认证和授权等功能的问题,这也是我们在单体服务的时候一直做的,将各种各样的框架集成到系统中,那么现在在微服务时代,或者说在istio有没有解决方法能解决这个问题呢,让服务真正回归业务,不再去过多的管理认证的问题呢.&lt;/p&gt;

&lt;p&gt;在本节中我们将会将我们的应用构建为一个需要使用jwt token才能访问的服务,在没有jwt token的情况下,将会返回401 未授权.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-opa授权</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-opa%E6%8E%88%E6%9D%83/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-opa%E6%8E%88%E6%9D%83/</guid>
      <description>&lt;p&gt;在上一章节中,我们使用jwt进行了认证,那么我们如何对资源进行授权检查呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-tls</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-tls/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-tls/</guid>
      <description>&lt;p&gt;我们已经完成了我们服务的路由,并且也已经有了镜像流量了,那么接下来我们要做什么呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-多服务通信</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%A4%9A%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%A4%9A%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;在之前的示例中,我们在istio中启动了nginx,tomcat等服务,那在此节中,我们再深入的进行一些功能的使用;&lt;/p&gt;

&lt;p&gt;在微服务的背景下,现在越来越多的被拆分为单个服务了,那么这些服务怎么在istio上运行,服务间如何进行通信呢?在本节中我们将尝试构建一个proxy服务和target服务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-安装</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;p&gt;istio-安装&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-引入外部服务</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;在istio中所有的流量都是通过istio的initContainer启动的时候对iptable进行了劫持的,那么外部流量就无法通过dns等服务发现机制进行路由了,这个时候怎么办呢? 这一节我们就来解决这个问题.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-服务路由</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1/</guid>
      <description>&lt;p&gt;在上一节中,我们使用nginx开启了我们istio的第一个应用,现在我们加入另外一个服务tomcat&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本节内容基于上节内容,请先运行上一节的yaml文件,然后再体验本节内容&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-示例</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;在上一节中我们已经成功的安装了istio的各个组件,接下来我们一起来运行一个nginx,体验一下istio的功能&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-网关</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E7%BD%91%E5%85%B3/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E7%BD%91%E5%85%B3/</guid>
      <description>&lt;p&gt;在上一节中我们已经成功的简单运行了istio的一个路由,也有了一番流量管理的体验,那么很多人都不禁要问,这些配置和yaml是什么意思呢?&lt;/p&gt;

&lt;p&gt;那接下来我们基于istio示例中的配置,一点一点的解析这些yaml文件.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;nginx.yaml中的内容为k8s的yaml文件,再此不做赘述.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-自定义mixer adapter</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E8%87%AA%E5%AE%9A%E4%B9%89mixer-adapter/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E8%87%AA%E5%AE%9A%E4%B9%89mixer-adapter/</guid>
      <description>&lt;p&gt;本节我们将自定义一个adapter,adapter和mixer通信使用grpc,所以本节需要对grpc和mixer的adapter有一定的了解.&lt;/p&gt;

&lt;p&gt;基于的环境:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;istio 1.0.4&lt;/li&gt;
&lt;li&gt;golang 1.11(go module)&lt;/li&gt;
&lt;li&gt;goland (或者其他go IDE)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-错误排查清单</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%E6%B8%85%E5%8D%95/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%E6%B8%85%E5%8D%95/</guid>
      <description>&lt;p&gt;使用到istio的时候,我发现istio对于调试方面,错误提示方面还是不怎么友好,很多时候都不知道去哪里找错误原因,突然想到飞机那么复杂的系统是如何做到一直按照正确的方式运行的呢,遂提出此错误排查清单,用于排查部分错误,各位同仁可以一句此错误清单进行异常的排查,或者一句不同的因素对错误进行处理.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迈向istio-镜像流量</title>
      <link>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E9%95%9C%E5%83%8F%E6%B5%81%E9%87%8F/</link>
      <pubDate>Mon, 01 Apr 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/04/%E8%BF%88%E5%90%91istio-%E9%95%9C%E5%83%8F%E6%B5%81%E9%87%8F/</guid>
      <description>&lt;p&gt;我们在前面几个章节中使用了两个服务(proxy,target),现在我们想对target进行一次升级,但是现在我们这个代码写的还不够好(没人能说他的代码一次就是期望的行为),希望通过复制一部分现在的流量 用来测试这个服务是否正确,那么这个时候就会使用到istio的镜像流量功能了&lt;/p&gt;

&lt;p&gt;好了,大幕拉开,开始我们的表演.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Controller manager高可用实现方式</title>
      <link>https://tangxusc.github.io/blog/2019/03/controller-manager%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/controller-manager%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.colabug.com/2801661.html&#34;&gt;https://www.colabug.com/2801661.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这不是一系列入门级别的文章，也不是按部就班而来的，而是我看到哪里，发现有些代码写的精妙的地方，都值得我们学习下，顺手记录下来，一方面是让自己将来可以有迹可循，另外对大家应该也会有所帮助。而且记录本身成本并不是很高。&lt;/p&gt;

&lt;p&gt;高可用部署情况下，需要部署多个 controller manager （以下简称 cm ），每个 cm 需要 &lt;code&gt;--leader-elect=true&lt;/code&gt;
启动参数，即告知 cm 以高可用方式启动，谁要想进行真正的工作，必须先抢到锁，被选举为 leader 才行，而抢不到所得只能待机，在 leader 因为异常终止的时候，由剩余的其余节点再次获得锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitflow 工作流</title>
      <link>https://tangxusc.github.io/blog/2019/03/gitflow-%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/gitflow-%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>&lt;p&gt;&lt;code&gt;Gitflow&lt;/code&gt;工作流定义了一个围绕项目发布的严格分支模型。虽然比&lt;a href=&#34;http://blog.jobbole.com/76857/&#34;&gt;功能分支工作流&lt;/a&gt;复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gitflow&lt;/code&gt;工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：&lt;code&gt;Pull Requests&lt;/code&gt;、隔离实验性开发和更高效的协作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 程序性能优化及 pprof 使用方法详解</title>
      <link>https://tangxusc.github.io/blog/2019/03/go-%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8F%8A-pprof-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/go-%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8F%8A-pprof-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.jb51.net/article/127551.htm&#34;&gt;https://www.jb51.net/article/127551.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章主要为大家详细介绍了 Go 程序性能优化及 pprof 的使用方法，具有一定的参考价值，感兴趣的小伙伴们可以参考一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang大杀器之性能剖析PProf</title>
      <link>https://tangxusc.github.io/blog/2019/03/golang%E5%A4%A7%E6%9D%80%E5%99%A8%E4%B9%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90pprof/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/golang%E5%A4%A7%E6%9D%80%E5%99%A8%E4%B9%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90pprof/</guid>
      <description>&lt;p&gt;写了几吨代码，实现了几百个接口。功能测试也通过了，终于成功的部署上线了&lt;/p&gt;

&lt;p&gt;结果，性能不佳，什么鬼？&lt;/p&gt;

&lt;p&gt;本文教你使用 PProf来分析程序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go模块简介</title>
      <link>https://tangxusc.github.io/blog/2019/03/go%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/go%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;go module模块的简介和使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intellij IDEA 基于编辑器的 REST 客户端介绍</title>
      <link>https://tangxusc.github.io/blog/2019/03/intellij-idea-%E5%9F%BA%E4%BA%8E%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84-rest-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/intellij-idea-%E5%9F%BA%E4%BA%8E%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84-rest-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/u011054333/article/details/78705256&#34;&gt;https://blog.csdn.net/u011054333/article/details/78705256&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近 Intellij IDEA 更新到了 2017.3 这一版本，这个版本又增加了很多新功能。我觉得其中这个基于编辑器的 REST 客户端这个功能很不错，可以为我们带来很多方便。这个功能并不仅仅在 Intellij IDEA 才有，最近更新的所有 Jetbrains 系 IIDE 都有这个功能。&lt;/p&gt;

&lt;p&gt;以往我们开发和调试网络程序，用到的无非是这几种办法：浏览器 F12 工具、Fiddler、Wireshark、curl 等命令行工具、手动使用 HTTP 客户端类库编程。不过这些方法总是有些不好用。Jetbrains 这个基于编辑器的 REST 客户端用起来倒是让我眼前一亮。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 奇技淫巧 - 插件化注解处理 API(Pluggable Annotation Processing API)</title>
      <link>https://tangxusc.github.io/blog/2019/03/java-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E6%8F%92%E4%BB%B6%E5%8C%96%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86-apipluggable-annotation-processing-api/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/java-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E6%8F%92%E4%BB%B6%E5%8C%96%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86-apipluggable-annotation-processing-api/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/throwable/p/9139908.html&#34;&gt;https://www.cnblogs.com/throwable/p/9139908.html&lt;/a&gt;
插件化注解处理 API(Pluggable Annotation Processing API)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java 读写锁实现原理</title>
      <link>https://tangxusc.github.io/blog/2019/03/java-%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/java-%E8%AF%BB%E5%86%99%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://my.oschina.net/editorial-story/blog/1928306&#34;&gt;https://my.oschina.net/editorial-story/blog/1928306&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近做的一个小项目中有这样的需求：整个项目有一份*config.json*保存着项目的一些配置，是存储在本地文件的一个资源，并且应用中存在读写（读 &amp;gt;&amp;gt; 写）更新问题。既然读写并发操作，那么就涉及到操作互斥，这里自然想到了读写锁，本文对读写锁方面的知识做个梳理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java8 日期和时间</title>
      <link>https://tangxusc.github.io/blog/2019/03/java8-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/java8-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/a80596890555/article/details/58687444&#34;&gt;https://blog.csdn.net/a80596890555/article/details/58687444&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何正确处理时间&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java注释处理和创建构建器</title>
      <link>https://tangxusc.github.io/blog/2019/03/java%E6%B3%A8%E9%87%8A%E5%A4%84%E7%90%86%E5%92%8C%E5%88%9B%E5%BB%BA%E6%9E%84%E5%BB%BA%E5%99%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/java%E6%B3%A8%E9%87%8A%E5%A4%84%E7%90%86%E5%92%8C%E5%88%9B%E5%BB%BA%E6%9E%84%E5%BB%BA%E5%99%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;http://www.baeldung.com/java-annotation-processing-builder&#34;&gt;http://www.baeldung.com/java-annotation-processing-builder&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文是&lt;strong&gt;Java源代码级别注释处理的简介，&lt;/strong&gt;并提供了使用此技术在编译期间生成其他源文件的示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins Sonar Github 代码质量管理</title>
      <link>https://tangxusc.github.io/blog/2019/03/jenkins-sonar-github-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/jenkins-sonar-github-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://segmentfault.com/a/1190000015592863&#34;&gt;https://segmentfault.com/a/1190000015592863&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jenkins Sonar Github 代码质量管理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Operator SDK</title>
      <link>https://tangxusc.github.io/blog/2019/03/kubernetes-operator-sdk/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/kubernetes-operator-sdk/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://banzaicloud.com/blog/operator-sdk/&#34;&gt;https://banzaicloud.com/blog/operator-sdk/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;a href=&#34;https://banzaicloud.com&#34;&gt;Banzai Cloud，&lt;/a&gt;我们一直在寻找新的创新技术，以支持我们的用户使用&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34;&gt;Pipeline&lt;/a&gt;过渡到部署到Kubernetes的微服务。最近几个月，我们与&lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt;和&lt;a href=&#34;https://coreos.com/&#34;&gt;RedHat&lt;/a&gt;合作，开展了运营商及其刚刚开源的项目，并在&lt;a href=&#34;https://github.com/operator-framework&#34;&gt;GitHub上提供&lt;/a&gt;。如果您通读这篇博客，您将了解到什么是&lt;code&gt;operator&lt;/code&gt;，如何使用它&lt;code&gt;operator sdk&lt;/code&gt;来开发&lt;code&gt;operator&lt;/code&gt;我们在&lt;a href=&#34;https://banzaicloud.com&#34;&gt;Banzai Cloud&lt;/a&gt;开发和使用的具体示例。我们的&lt;a href=&#34;https://github.com/banzaicloud&#34;&gt;GitHub上&lt;/a&gt;还有一些运营商都可以在新的运营商SDK &lt;a href=&#34;https://github.com/banzaicloud&#34;&gt;上&lt;/a&gt;构建。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lombok 原理分析与功能实现</title>
      <link>https://tangxusc.github.io/blog/2019/03/lombok-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B8%8E%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/lombok-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B8%8E%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.mythsman.com/2017/12/19/1/&#34;&gt;https://blog.mythsman.com/2017/12/19/1/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两天没什么重要的事情做，但是想着还要春招总觉得得学点什么才行，正巧想起来前几次面试的时候面试官总喜欢问一些框架的底层实现，但是我学东西比较倾向于用到啥学啥，因此在这些方面吃了很大的亏。而且其实很多框架也多而杂，代码起来费劲，无非就是几套设计模式套一套，用到的东西其实也就那么些，感觉没啥新意。刚这两天读” 深入理解 JVM” 的时候突然想起来有个叫 Lombok 的东西以前一直不能理解他的实现原理，现在正好趁着闲暇的时间研究研究。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minikube 安装</title>
      <link>https://tangxusc.github.io/blog/2019/03/minikube-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/minikube-%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://yq.aliyun.com/articles/221687&#34;&gt;https://yq.aliyun.com/articles/221687&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了方便大家开发和体验 Kubernetes，社区提供了可以在本地部署的 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;Minikube&lt;/a&gt;。由于网络访问原因，很多朋友无法使用 minikube 进行实验。为此我们提供了一个修改版的 Minikube，可以从阿里云的镜像地址来获取所需 Docker 镜像和配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Operator 原理</title>
      <link>https://tangxusc.github.io/blog/2019/03/operator-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/operator-%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/yan234280533/article/details/75333246&#34;&gt;https://blog.csdn.net/yan234280533/article/details/75333246&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Operator 是 CoreOS 推出的旨在简化复杂有状态应用管理的框架，它是一个感知应用状态的控制器，通过扩展 Kubernetes API 来自动创建、管理和配置应用实例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RKE安装kubernetes集群</title>
      <link>https://tangxusc.github.io/blog/2019/03/rke%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/rke%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;RKE安装kubernetes集群&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 中登录相关的日志</title>
      <link>https://tangxusc.github.io/blog/2019/03/ubuntu-%E4%B8%AD%E7%99%BB%E5%BD%95%E7%9B%B8%E5%85%B3%E7%9A%84%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/ubuntu-%E4%B8%AD%E7%99%BB%E5%BD%95%E7%9B%B8%E5%85%B3%E7%9A%84%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/sparkdev/p/7694202.html&#34;&gt;https://www.cnblogs.com/sparkdev/p/7694202.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sparkdev/p/7694202.html&#34;&gt;Ubuntu 中登录相关的日志&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker maven plugin使用</title>
      <link>https://tangxusc.github.io/blog/2019/03/docker-maven-plugin%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/docker-maven-plugin%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;随着容器化的进行，测试环境和线上环境开始尝试容器化发布。因此需要将现有的maven工程进行容器化，容器化的好处不言而喻，但是针对原先没有解耦的应用（容器配置和代码耦合在一起），制作镜像还是有些成本的。本文主要记录对于webx和springboot应用的镜像制作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker入门</title>
      <link>https://tangxusc.github.io/blog/2019/03/docker%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/docker%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;Docker简介&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker安装(国内环境)</title>
      <link>https://tangxusc.github.io/blog/2019/03/docker%E5%AE%89%E8%A3%85%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/docker%E5%AE%89%E8%A3%85%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;p&gt;docker安装(国内环境)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>drone CI的安装(docker版本)</title>
      <link>https://tangxusc.github.io/blog/2019/03/drone-ci%E7%9A%84%E5%AE%89%E8%A3%85docker%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/drone-ci%E7%9A%84%E5%AE%89%E8%A3%85docker%E7%89%88%E6%9C%AC/</guid>
      <description>&lt;p&gt;drone ci是我使用过的最方便最纯粹的在docker基础上的cicd工具,推荐大家都使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fluentd 安装、配置、使用介绍</title>
      <link>https://tangxusc.github.io/blog/2019/03/fluentd-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/fluentd-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;fluentd&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref-home&#34;&gt;&lt;a href=&#34;#fn-home&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 是一个针对日志的收集、处理、转发系统。通过丰富的插件系统， 可以收集来自于各种系统或应用的日志，转化为用户指定的格式后，转发到用户所指定的日志存储系统之中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC-interceptor</title>
      <link>https://tangxusc.github.io/blog/2019/03/grpc-interceptor/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/grpc-interceptor/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://colobu.com/2017/04/17/dive-into-gRPC-interceptor/&#34;&gt;https://colobu.com/2017/04/17/dive-into-gRPC-interceptor/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;gRPC-Go 增加了拦截器 (interceptor) 的功能， 就像 Java Servlet 中的 filter 一样，可以对 RPC 的请求和响应进行拦截处理，而且既可以在客户端进行拦截，也可以对服务器端进行拦截。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git subtree 教程</title>
      <link>https://tangxusc.github.io/blog/2019/03/git-subtree-%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/git-subtree-%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://segmentfault.com/a/1190000012002151&#34;&gt;https://segmentfault.com/a/1190000012002151&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于子仓库或者说是仓库共用，git 官方推荐的工具是 git subtree。 我自己也用了一段时间的 git subtree，感觉比 git submodule 好用，但是也有一些缺点，在可接受的范围内。
所以对于仓库共用，在 git subtree 与 git submodule 之中选择的话，我推荐 git subtree。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git 必须要熟练掌握的命令</title>
      <link>https://tangxusc.github.io/blog/2019/03/git-%E5%BF%85%E9%A1%BB%E8%A6%81%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/git-%E5%BF%85%E9%A1%BB%E8%A6%81%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://segmentfault.com/a/1190000013241889&#34;&gt;https://segmentfault.com/a/1190000013241889&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为结合了开发中可能遇到的场景，篇幅较长，不过我觉得很有助于你理解 git 的运作机制，而不是死记硬背命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git常用命令速查表</title>
      <link>https://tangxusc.github.io/blog/2019/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</guid>
      <description>&lt;p&gt;git常用命令速查表&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git指令列表</title>
      <link>https://tangxusc.github.io/blog/2019/03/git%E6%8C%87%E4%BB%A4%E5%88%97%E8%A1%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/git%E6%8C%87%E4%BB%A4%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;p&gt;git指令列表&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git版本控制最佳实践</title>
      <link>https://tangxusc.github.io/blog/2019/03/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;git版本控制最佳实践&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang日志库</title>
      <link>https://tangxusc.github.io/blog/2019/03/golang%E6%97%A5%E5%BF%97%E5%BA%93/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/golang%E6%97%A5%E5%BF%97%E5%BA%93/</guid>
      <description>&lt;p&gt;golang 标准库的日志框架非常简单，仅仅提供了 print，panic 和 fatal 三个函数对于更精细的日志级别、日志&lt;a href=&#34;https://www.baidu.com/s?wd=%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pl_sl_csd&#34;&gt;文件分割&lt;/a&gt;以及日志分发等方面并没有提供支持。所以催生了很多第三方的日志库，但是在 golang 的世界里，没有一个日志库像 slf4j 那样在 Java 中具有绝对统治地位。golang 中，流行的日志框架包括 logrus、zap、zerolog、seelog 等。
logrus 是目前 Github 上 star 数量最多的日志库，目前 (2018.08，下同)star 数量为 8119，fork 数为 1031。logrus 功能强大，性能高效，而且具有高度灵活性，提供了自定义插件的功能。很多开源项目，如 docker，prometheus 等，都是用了 logrus 来记录其日志。
zap 是 &lt;a href=&#34;https://www.baidu.com/s?wd=Uber&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pl_sl_csd&#34;&gt;Uber&lt;/a&gt; 推出的一个快速、结构化的分级日志库。具有强大的 ad-hoc 分析功能，并且具有灵活的仪表盘。zap 目前在 GitHub 上的 star 数量约为 4.3k。
seelog 提供了灵活的异步调度、格式化和过滤功能。目前在 GitHub 上也有约 1.1k。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>helm简介</title>
      <link>https://tangxusc.github.io/blog/2019/03/helm%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/helm%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;helm简介&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jaeger-operator安装</title>
      <link>https://tangxusc.github.io/blog/2019/03/jaeger-operator%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/jaeger-operator%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;p&gt;jaeger-operator安装&lt;/p&gt;

&lt;p&gt;在一个成规模的微服务系统中,一个功能不单由这一个服务完成,而是多个服务协作来共同完成,但是如果其中一个服务出现了错误,对于错误的追踪,对于整个调用链的追踪便成为了难题.&lt;/p&gt;

&lt;p&gt;好在外国佬遇到了这些问题,指定了&lt;code&gt;opentracing&lt;/code&gt;规范,并且提供了例如&lt;code&gt;zipkin&lt;/code&gt;,&lt;code&gt;pinpoint&lt;/code&gt;,&lt;code&gt;jaeger&lt;/code&gt;等工具供我们使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jgit获取git仓库中的部分文件</title>
      <link>https://tangxusc.github.io/blog/2019/03/jgit%E8%8E%B7%E5%8F%96git%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/jgit%E8%8E%B7%E5%8F%96git%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;jgit在获取文件时,只能获取仓库中的全部文件,本文提供一种方法,使用jgit获取仓库中的部分文件.&lt;/p&gt;

&lt;p&gt;适用场景:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户提交git仓库地址,文件地址,需要读取仓库中的远程文件&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>kubeadm安装HA集群</title>
      <link>https://tangxusc.github.io/blog/2019/03/kubeadm%E5%AE%89%E8%A3%85ha%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/kubeadm%E5%AE%89%E8%A3%85ha%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;鉴于使用二进制的方式安装较为复杂,且不太好处理证书的生成,分发等问题,并且对性能没有较高的要求,所以强烈推荐使用此模式,具体下来这个模式的好处为:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;官方提供的工具,有官方的文档支持&lt;/li&gt;
&lt;li&gt;安装贼简单,没有其他的依赖&lt;/li&gt;
&lt;li&gt;扩展性强,有官方的一些扩展支持&lt;/li&gt;
&lt;li&gt;集群全部以容器启动,所以没那么多你需要管理的service&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>kubeadm生成的token过期后，集群增加节点</title>
      <link>https://tangxusc.github.io/blog/2019/03/kubeadm%E7%94%9F%E6%88%90%E7%9A%84token%E8%BF%87%E6%9C%9F%E5%90%8E%E9%9B%86%E7%BE%A4%E5%A2%9E%E5%8A%A0%E8%8A%82%E7%82%B9/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/kubeadm%E7%94%9F%E6%88%90%E7%9A%84token%E8%BF%87%E6%9C%9F%E5%90%8E%E9%9B%86%E7%BE%A4%E5%A2%9E%E5%8A%A0%E8%8A%82%E7%82%B9/</guid>
      <description>&lt;p&gt;kubeadm生成的token过期后，集群增加节点&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus和alertmanager监控并发送邮件</title>
      <link>https://tangxusc.github.io/blog/2019/03/prometheus%E5%92%8Calertmanager%E7%9B%91%E6%8E%A7%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/prometheus%E5%92%8Calertmanager%E7%9B%91%E6%8E%A7%E5%B9%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid>
      <description>&lt;p&gt;prometheus和alertmanager监控并发送邮件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis配置详解</title>
      <link>https://tangxusc.github.io/blog/2019/03/redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;redis配置详解&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sonarqube使用指南</title>
      <link>https://tangxusc.github.io/blog/2019/03/sonarqube%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/sonarqube%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;​   Sonar是一个用于代码质量管理的开源平台，用于管理源代码的质量，可以从多个维度检测代码质量通过插件形式，可以支持包括java,C#,C/C++,PL/SQL,Cobol,JavaScrip,Groovy等等二十几种编程语言的代码质量管理与检测&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>五分钟读懂 UML 类图</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BA%94%E5%88%86%E9%92%9F%E8%AF%BB%E6%87%82-uml-%E7%B1%BB%E5%9B%BE/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BA%94%E5%88%86%E9%92%9F%E8%AF%BB%E6%87%82-uml-%E7%B1%BB%E5%9B%BE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/shindo/p/5579191.html&#34;&gt;https://www.cnblogs.com/shindo/p/5579191.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;五分钟读懂-uml-类图&#34;&gt;五分钟读懂 UML 类图&lt;/h1&gt;

&lt;p&gt;平时阅读一些远吗分析类文章或是设计应用架构时没少与 UML 类图打交道。实际上，UML 类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从分布式一致性谈到 CAP 理论、BASE 理论</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BB%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E8%B0%88%E5%88%B0-cap-%E7%90%86%E8%AE%BAbase-%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BB%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E8%B0%88%E5%88%B0-cap-%E7%90%86%E8%AE%BAbase-%E7%90%86%E8%AE%BA/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/szlbm/p/5588543.html&#34;&gt;https://www.cnblogs.com/szlbm/p/5588543.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/szlbm/p/5588543.html&#34;&gt;从分布式一致性谈到 CAP 理论、BASE 理论&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Golang 利用 ectd 实现一个分布式锁</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8-golang-%E5%88%A9%E7%94%A8-ectd-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8-golang-%E5%88%A9%E7%94%A8-ectd-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;&lt;code&gt;etcd&lt;/code&gt;是随着&lt;code&gt;CoreOS&lt;/code&gt;项目一起成长起来的，随着 Golang 和 CoreOS 等项目在开源社区日益火热， &lt;code&gt;etcd&lt;/code&gt;作为一个高可用、强一致性的分布式 Key-Value 存储系统被越来越多的开发人员关注和使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 kubeadm 搭建 Kubernetes(1.10.2) 集群（国内环境）</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8-kubeadm-%E6%90%AD%E5%BB%BA-kubernetes1.10.2-%E9%9B%86%E7%BE%A4%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8-kubeadm-%E6%90%AD%E5%BB%BA-kubernetes1.10.2-%E9%9B%86%E7%BE%A4%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/RainingNight/p/using-kubeadm-to-create-a-cluster.html&#34;&gt;https://www.cnblogs.com/RainingNight/p/using-kubeadm-to-create-a-cluster.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用 kubeadm 搭建 Kubernetes(1.10.2) 集群（国内环境）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用go mod(1.11)安装grpc</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8go-mod1.11%E5%AE%89%E8%A3%85grpc/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8go-mod1.11%E5%AE%89%E8%A3%85grpc/</guid>
      <description>&lt;p&gt;使用go mod(1.11)安装grpc&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用nfs作为k8s的PersistentVolume</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8nfs%E4%BD%9C%E4%B8%BAk8s%E7%9A%84persistentvolume/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8nfs%E4%BD%9C%E4%B8%BAk8s%E7%9A%84persistentvolume/</guid>
      <description>&lt;p&gt;使用nfs作为k8s的PersistentVolume&lt;/p&gt;

&lt;p&gt;在较小规模的生产和开发的过程中,对于k8s的某些应用可能我们需要提供存储的支持,在初期我们可能并不需要性能那么高,扩展性那么强的存储,那么这个时候nfs就成了我们的首选&lt;/p&gt;

&lt;p&gt;本文将引导各位在服务器中部署nfs服务,并在k8s中使用nfs服务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用rook搭建存储集群</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8rook%E6%90%AD%E5%BB%BA%E5%AD%98%E5%82%A8%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8rook%E6%90%AD%E5%BB%BA%E5%AD%98%E5%82%A8%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;rook是云原生的存储&lt;strong&gt;协调器&lt;/strong&gt;,为各种存储提供解决方案,提供自我管理,自我扩展,自我修复的存储服务,在kubernetes中实际实现是operator方式.&lt;/p&gt;

&lt;p&gt;在rook 0.9版本中,Ceph已经是&lt;strong&gt;beta&lt;/strong&gt;支持状态了.&lt;/p&gt;

&lt;p&gt;Ceph是一种高度可扩展的分布式存储解决方案，适用于具有多年生产部署的块存储，对象存储和共享文件系统.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用shipyard proxy开启docker remote远程端口(2375)</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8shipyard-proxy%E5%BC%80%E5%90%AFdocker-remote%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A32375/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E4%BD%BF%E7%94%A8shipyard-proxy%E5%BC%80%E5%90%AFdocker-remote%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A32375/</guid>
      <description>&lt;p&gt;使用shipyard proxy开启docker remote远程端口(2375)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式事务Saga模式</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1saga%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1saga%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;两阶段提交2PC是分布式事务中最强大的事务类型之一，两段提交就是分两个阶段提交，第一阶段询问各个事务数据源是否准备好，第二阶段才真正将数据提交给事务数据源，当需要同时更新多个数据源实体时，例如确认订单并立即更新库存时，它非常有用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>前端加载私有文件随想</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%BD%BD%E7%A7%81%E6%9C%89%E6%96%87%E4%BB%B6%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%BD%BD%E7%A7%81%E6%9C%89%E6%96%87%E4%BB%B6%E9%9A%8F%E6%83%B3/</guid>
      <description>&lt;p&gt;在前后端分离的工程中,前后端通信链路由前端调用后端,变成了前端&amp;ndash;&amp;gt;api gateway&amp;ndash;&amp;gt;后端,那么前端在加载一些私有资源(需要权限,需要认证)等文件时会存在无法传入token的问题
本文是针对前端加载资源的随想&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在golang中创建调用图</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%9C%A8golang%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%B0%83%E7%94%A8%E5%9B%BE/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%9C%A8golang%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%B0%83%E7%94%A8%E5%9B%BE/</guid>
      <description>&lt;p&gt;在golang中创建调用图&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 go&#43;etcd 实现分布式锁</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%9F%BA%E4%BA%8E-go-etcd-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%9F%BA%E4%BA%8E-go-etcd-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;基于 go+etcd 实现分布式锁,主要使用的是租约机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何一步一步用 DDD 设计一个电商网站</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E7%94%A8-ddd-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E7%94%A8-ddd-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99/</guid>
      <description>&lt;p&gt;如何一步一步用 DDD 设计一个电商网站&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;http://www.cnblogs.com/Zachary-Fan/p/5991674.html&#34;&gt;http://www.cnblogs.com/Zachary-Fan/p/5991674.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>如何使用 go get 下载 gitlab 私有项目</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-go-get-%E4%B8%8B%E8%BD%BD-gitlab-%E7%A7%81%E6%9C%89%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-go-get-%E4%B8%8B%E8%BD%BD-gitlab-%E7%A7%81%E6%9C%89%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;在我们使用golang开发项目时,会遇到私有仓库问题,本文章讲解golang中私有仓库的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微服务分布式事务Saga模式简介</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1saga%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1saga%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;该文是基于《微服务模式》作者Chris Richardson的QCONSF 2017会议上的PPT文章(这里)和其 Eventuate Tram Saga框架之上，对Saga模式进行的原理性解说，其中包含banq个人经验总结和见解，请从批判性视角看待。Chris Richardson的另外一本书籍《POJO in Action》曾经是帮助Spring成功挑战了EJB2。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树形结构的数据库表 Schema 设计 - 基于左右值编码</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8-schema-%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8E%E5%B7%A6%E5%8F%B3%E5%80%BC%E7%BC%96%E7%A0%81/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8-schema-%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8E%E5%B7%A6%E5%8F%B3%E5%80%BC%E7%BC%96%E7%A0%81/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/M-D-Luffy/p/4712846.html&#34;&gt;https://www.cnblogs.com/M-D-Luffy/p/4712846.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;    程序设计过程中，我们常常用树形结构来表征某些数据的关联关系，如企业上下级部门、栏目结构、商品分类等等，通常而言，这些树状结构需要借助于数据库完 成持久化。然而目前的各种基于关系的数据库，都是以二维表的形式记录存储数据信息，因此是不能直接将 Tree 存入 DBMS，设计合适的 Schema 及其对 应的 CRUD 算法是实现关系型数据库中存储树形结构的关键。&lt;/p&gt;

&lt;p&gt;    理想中树形结构应该具备如下特征：数据存储冗余度小、直观性强；检索遍历过程简单高效；节点增删改查 CRUD 操作高效。无意中在网上搜索到一种很巧妙的 设计，原文是英文，看过后感觉有点意思，于是便整理了一下。本文将介绍两种树形结构的 Schema 设计方案：一种是直观而简单的设计思路，另一种是基于左 右值编码的改进方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>源代码就是设计</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E6%BA%90%E4%BB%A3%E7%A0%81%E5%B0%B1%E6%98%AF%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E6%BA%90%E4%BB%A3%E7%A0%81%E5%B0%B1%E6%98%AF%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;源代码就是设计&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 JGit 通过 Java 来操作 Git</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E7%94%A8-jgit-%E9%80%9A%E8%BF%87-java-%E6%9D%A5%E6%93%8D%E4%BD%9C-git/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E7%94%A8-jgit-%E9%80%9A%E8%BF%87-java-%E6%9D%A5%E6%93%8D%E4%BD%9C-git/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://eclipse.org/jgit/&#34;&gt;JGit&lt;/a&gt; 是一个由 &lt;a href=&#34;https://www.eclipse.org/org/&#34;&gt;Eclipse 基金会&lt;/a&gt;开发、用于操作 git 的纯 Java 库。它本身也是 Eclispe 的一部分，实际上 Eclipse 的插件 &lt;a href=&#34;http://www.eclipse.org/egit/&#34;&gt;EGit&lt;/a&gt; 便是基于 JGit 的。如果你像我这样有使用代码来操作 git 的需求，那就准备好拥抱 JGit 吧。目前来看别的竞品没它靠谱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动部署k8s基础应用</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2k8s%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2k8s%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;自动部署k8s基础应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设置终端使用代理的几种方法</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;设置终端使用代理的几种方法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式 (十七) 状态模式 State（对象行为型</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%81%E4%B8%83-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F-state%E5%AF%B9%E8%B1%A1%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%81%E4%B8%83-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F-state%E5%AF%B9%E8%B1%A1%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/hguisu/article/details/7557252&#34;&gt;https://blog.csdn.net/hguisu/article/details/7557252&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/hguisu/article/details/7557252&#34;&gt;设计模式 (十七) 状态模式 State（对象行为型）&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式 - 命令模式</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://www.cnblogs.com/f-zhao/p/6203208.html&#34;&gt;https://www.cnblogs.com/f-zhao/p/6203208.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设计模式 - 命令模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>配置redis外网可访问</title>
      <link>https://tangxusc.github.io/blog/2019/03/%E9%85%8D%E7%BD%AEredis%E5%A4%96%E7%BD%91%E5%8F%AF%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/%E9%85%8D%E7%BD%AEredis%E5%A4%96%E7%BD%91%E5%8F%AF%E8%AE%BF%E9%97%AE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&#34;http://ksria.com/simpread/&#34;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&#34;https://blog.csdn.net/hel12he/article/details/46911159&#34;&gt;https://blog.csdn.net/hel12he/article/details/46911159&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;配置redis外网可访问&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adapter.my.config</title>
      <link>https://tangxusc.github.io/blog/1/01/adapter.my.config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tangxusc.github.io/blog/1/01/adapter.my.config/</guid>
      <description>config for my-adapter
Params  config for my-adapter
  Field Type Description    filePath string  Path of the file to save the information about runtime requests.
     </description>
    </item>
    
  </channel>
</rss>