<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on 苏连云的博客</title>
    <link>https://tangxusc.github.io/blog/tags/maven/</link>
    <description>Recent content in Maven on 苏连云的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2019 14:15:59 +0800</lastBuildDate>
    
	<atom:link href="https://tangxusc.github.io/blog/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker maven plugin使用</title>
      <link>https://tangxusc.github.io/blog/2019/03/docker-maven-plugin%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 20 Mar 2019 14:15:59 +0800</pubDate>
      
      <guid>https://tangxusc.github.io/blog/2019/03/docker-maven-plugin%E4%BD%BF%E7%94%A8/</guid>
      <description>docker maven plugin使用 随着容器化的进行，测试环境和线上环境开始尝试容器化发布。因此需要将现有的maven工程进行容器化，容器化的好处不言而喻，但是针对原先没有解耦的应用（容器配置和代码耦合在一起），制作镜像还是有些成本的。本文主要记录对于webx和springboot应用的镜像制作。
springboot镜像制作 springboot制作官方有介绍，最主要的就是在pom.xml中增加docker maven plugin，然后配置读取最终生成的jar即可。
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.spotify&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;docker-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;imageName&amp;gt;aegis-package-switch:1.0&amp;lt;/imageName&amp;gt; &amp;lt;dockerDirectory&amp;gt;${project.basedir}/docker&amp;lt;/dockerDirectory&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;targetPath&amp;gt;/&amp;lt;/targetPath&amp;gt; &amp;lt;directory&amp;gt;bin&amp;lt;/directory&amp;gt; &amp;lt;include&amp;gt;run.sh&amp;lt;/include&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;targetPath&amp;gt;/&amp;lt;/targetPath&amp;gt; &amp;lt;directory&amp;gt;${project.build.directory}&amp;lt;/directory&amp;gt; &amp;lt;include&amp;gt;${project.build.finalName}.jar&amp;lt;/include&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt;  docker-maven-plugin主要配置有：
 镜像名称 dockerfile文件 需要添加到镜像中的资源  docker-maven-plugin插件本身可以通过xml配置设置类似dockerfile中的简单操作（如添加文件等），但是为了统一和可读性，还是建议统一使用dockerfile。上面的示例中dockerfile位于项目目录的docker子目录中，目录结构类似：
. ├── bin │ └── run.sh ├── docker │ └── Dockerfile ├── pom.xml ├── src │ ├── main │ └── test  resources标签中包含需要添加到镜像中的文件，实际执行时插件会将它们复制到target/docker目录中，供dockerfile使用，否则dockerfile中将无法引用到文件。
然后就是最重要的dockerfile，springboot应用启动比较方便，依赖也很少，只要使用包含java的基础镜像即可。
FROM j8:1.0 RUN mkdir /work WORKDIR /work ADD run.sh /work/run.</description>
    </item>
    
  </channel>
</rss>